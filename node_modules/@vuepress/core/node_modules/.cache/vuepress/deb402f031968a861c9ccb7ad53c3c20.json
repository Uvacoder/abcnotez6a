{"remainingRequest":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/src/COMMANDLINE/index.md?vue&type=template&id=1376fbe4&","dependencies":[{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/src/COMMANDLINE/index.md","mtime":1641831156496},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ0aGUtY29tbWFuZC1saW5lIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0aGUtY29tbWFuZC1saW5lIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGhlIGNvbW1hbmQgbGluZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImJhc2giIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Jhc2giIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBCYXNoIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQmFzaCIpXSksCiAgICAgICAgX3ZtLl92KCIsIG9yIHRoZSAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQiIpXSksCiAgICAgICAgX3ZtLl92KCJvdXJuZS0iKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQSIpXSksCiAgICAgICAgX3ZtLl92KCJnYWluICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJTSCIpXSksCiAgICAgICAgX3ZtLl92KCJlbGwgLSAgaXMgdGhlIGRlZmF1bHQgc2hlbGwgZm9yIExpbnV4IGFuZCBNYWMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNoXyhVbml4X3NoZWxsKSIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigid2lraSBCYXNoIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2Jhc2gvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2Jhc2gvIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJNYWNPUyB2ZXJzaW9uIDEwLjE1IChDYXRhbGluYSkgYW5kIGhpZ2hlciB1c2VzIGEgc2ltaWxhciBkZWZhdWx0IHNoZWxsIGNhbGxlZCAiCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiWiBzaGVsbCIpXSksCiAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlpzaCIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJiYXNpYy1jb21tYW5kLXN0dWN0dXJlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNiYXNpYy1jb21tYW5kLXN0dWN0dXJlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQmFzaWMgQ29tbWFuZCBTdHVjdHVyZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIkIildKSwKICAgICAgICBfdm0uX3YoImlzIGNhbGxlZCB0aGUgX3NoZWxsIHByb21wdCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJDb21tYW5kIFtvcHRpb25zXVthcmd1bWVudHNdICBbcmVkaXJlY3RdIFtyZWRpcmVjdCBkZXN0aW5hdGlvbl1cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNvbW1hbmRzIGFyZSBjYXNlIHNlbnNpdGl2ZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImFyZ3VtZW50IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBpbmRpY2F0ZXMgb24gd2hhdCB0aGUgY29tbWFuZCBpcyB0byBwZXJmb3JtIGl0cyBhY3Rpb24gKGZpbGUocykvZm9sZGVyKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiT3B0aW9ucyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBhcmUgZ2VuZXJhbGx5IHByZWNlZGVkIGJ5IGEgaHlwaGVuICgiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCItIildKSwKICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJmb3IgbW9zdCBjb21tYW5kcywgb3B0aW9ucyBjYW4gYmUgc3RydW5nIHRvZ2V0aGVyOiAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibHMgLWFsIildKSwKICAgICAgICAgIF92bS5fdigiIG9yIHNlcGVyYXRlZDogIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImxzIC1hIC1sIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigicmVkaXJlY3Q6XG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPiIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBpcyB1c2VkIGZvciByZWRpcmVjdGluZyB0aGUgb3V0cHV0IG9mIGEgcHJvZ3JhbSB0byBzb21ldGhpbmcgb3RoZXIgdGhhbiBzdGRvdXQgKHN0YW5kYXJkIG91dHB1dCwgd2hpY2ggaXMgdGhlIHRlcm1pbmFsIGJ5IGRlZmF1bHQpLiBPdmVyd3JpdGVzIHRoZSBmaWxlIGlmIGl0IGV4aXN0cyBvciBjcmVhdGVzIGl0IGlmIGl0IGRvZXNuJ3QgZXhpc3QiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIj4+IildKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIGFwcGVuZHMgdG8gYSBmaWxlIG9yIGNyZWF0ZXMgdGhlIGZpbGUgaWYgaXQgZG9lc24ndCBleGlzdCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaGVscGVyLWNvbW1hbmRzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNoZWxwZXItY29tbWFuZHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhlbHBlciBDb21tYW5kcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY2xlYXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgY2xlYXJzIHRoZSB0ZXJtaW5hbCIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ0YWIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgYXV0b2NvbXBsZXRlcyB0aGUgbmFtZSBvZiBhIGZpbGUgb3IgZGlyZWN0b3J5IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIuKGkSBhbmQg4oaTIGFsbG93IHlvdSB0byBjeWNsZSB0aHJvdWdoIHByZXZpb3VzIGNvbW1hbmRzIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignZWNobyAiSGVsbG8gQ29tbWFuZCBMaW5lIiA+PiBoZWxsb19jbGkudHh0JyldKSwKICAgICAgICBfdm0uX3YoIiB0byBjcmVhdGUgYSBuZXcgZmlsZSBuYW1lZCAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiaGVsbG9fY2xpLnR4dCIpXSksCiAgICAgICAgX3ZtLl92KCcgYW5kIGFkZCAiSGVsbG8gQ29tbWFuZCBMaW5lIicpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjYXQgaGVsbG9fY2xpLnR4dCIpXSksCiAgICAgICAgX3ZtLl92KCIgdG8gcHJpbnQgdGhlIGNvbnRlbnRzIG9mIHRoZSAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiaGVsbG9fY2xpLnR4dCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiY29kZSIsIFtfdm0uX3YoIn4iKV0pLCBfdm0uX3YoIiBpcyBVc2VyLUhvbWUgRGlyZWN0cm95IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJhbHQtY2xpY2sgLT4gdGV4dHN0ZWxsZSBhdXN3w6RobGVuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImN0cmwtYSIpXSksCiAgICAgICAgICBfdm0uX3YoIiAtPiB0byBzdGFydCBvZiBsaW5lIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJjdHJsLWUiKV0pLCBfdm0uX3YoIi0+IHRvIGVuZCBvZiBsaW5lIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJjdHJsLXUiKV0pLCBfdm0uX3YoIi0+IGNsZWFyIGxpbmUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcGVuIC1hIEF0b20gVGV4dC50eHQiKV0pLAogICAgICAgIF92bS5fdigiIC0+IG9wZW5zIGZpbGUgaW4gYXBwbGljYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiU3BhY2U6ICIpLCBfYygiY29kZSIsIFtfdm0uX3YoIlxcIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCIvIildKSwgX3ZtLl92KCIgcm9vdCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiY29kZSIsIFtfdm0uX3YoIn4iKV0pLCBfdm0uX3YoIiBVc2VyLWRpcmVjdG9yeSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb21tYW5kcy1vdmVydmlldyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29tbWFuZHMtb3ZlcnZpZXciIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb21tYW5kcyBPdmVydmlldyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFtfYygidGgiLCBbX3ZtLl92KCJDb21tYW5kcyIpXSksIF92bS5fdigiICIpLCBfYygidGgiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRib2R5IiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJscyIpXSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkxpc3QgRmlsZXMiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJwd2QiKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJBcmJlaXRzdmVyemVpY2huaXMgKHByaW50IHdvcmtpbmcgZGlyZWN0b3J5KSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiY29kZSIsIFtfdm0uX3YoImNkIDxkaXJlY3Rvcnk+IildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhbmdlIGRpcmVjdG9yeSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiY29kZSIsIFtfdm0uX3YoImNkIC4uIildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigib25lIGxldmVsIHVwIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW19jKCJjb2RlIiwgW192bS5fdigibWtkaXIgPGRpcmVjdG9yeT4iKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJtYWtlIGRpcmVjdG9yeSAtIFZlcnplaWNobmlzIGVyc3RlbGxlbiIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiY29kZSIsIFtfdm0uX3YoInJtZGlyIDxkaXJlY3Rvcnk+IildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiVmVyemVpY2huaXMgbMO2c2NoZW4iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJybSAtciA8Zm9sZGVyPiIpXSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIkRlbGV0ZSBhIGZvbGRlciBhbmQgYWxsIGNvbnRlbnRzIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW19jKCJjb2RlIiwgW192bS5fdigicm0gPGZpbGU+IildKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiZGVsZXRlIEZpbGUiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJ0b3VjaCA8ZmlsZT4iKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJDcmVhdGUgRmlsZSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfYygiY29kZSIsIFtfdm0uX3YoIm9wZW4iKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPcGVuIEZpbGUiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJzYXkiKV0pXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJzcGVlY2ggb3V0cHV0IildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiZWNobyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5ob3d0b2dlZWsuY29tLzQ0NjA3MS9ob3ctdG8tdXNlLXRoZS1lY2hvLWNvbW1hbmQtb24tbGludXgvIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJkaXNwbGF5IGEgbGluZSBvZiB0ZXh0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImxzLWxpc3QiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2xzLWxpc3QiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBscyAtIGxpc3QiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigibHMiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCItYSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgLSBsaXN0cyBhbGwgY29udGVudHMsIGluY2x1ZGluZyBoaWRkZW4gZmlsZXMgYW5kIGRpcmVjdG9yaWVzIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLWwiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIC0gbGlzdHMgYWxsIGNvbnRlbnRzIG9mIGEgZGlyZWN0b3J5IGluIGxvbmcgZm9ybWF0LCBhcyB3ZWxsIGFzIHRoZSBmaWxlIHBlcm1pc3Npb25zIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLXQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIC0gb3JkZXJzIGZpbGVzIGFuZCBkaXJlY3RvcmllcyBieSB0aGUgdGltZSB0aGV5IHdlcmUgbGFzdCBtb2RpZmllZC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiQgbHMgLWxcblxuZHJ3eHIteHIteCA1IGNjIGVuZyA0MDk2IEp1biAyNCAxNjo1MSBhY3Rpb25cbmRyd3hyLXhyLXggNCBjYyBlbmcgNDA5NiBKdW4gMjQgMTY6NTEgY29tZWR5XG4tcnctci0tci0tIDEgY2MgZW5nICAgMCBKdW4gMjQgMTY6NTEgZ2VucmVzLnR4dFxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlRoZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIi1sIildKSwKICAgICAgICBfdm0uX3YoIiBvcHRpb24gbGlzdHMgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIGFzIGEgdGFibGUgd2l0aCA3IGNvbHVtbnM6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQWNjZXNzIHJpZ2h0cy4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIk51bWJlciBvZiBoYXJkIGxpbmtzLiBDb3VudHMgY2hpbGQgZGlyZWN0b3JpZXMgYW5kIGZpbGVzLiBJbmNsdWRlcyB0aGUgcGFyZW50IGRpcmVjdG9yeSBsaW5rICguLikgYW5kIGN1cnJlbnQgZGlyZWN0b3J5IGxpbmsgKC4pLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJVc2VybmFtZSBvZiB0aGUgZmlsZeKAmXMgb3duZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIm5hbWUgb2YgdGhlIGdyb3VwIHRoYXQgb3ducyB0aGUgZmlsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigic2l6ZSBvZiB0aGUgZmlsZSBpbiBieXRlcy4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImRhdGUgJiB0aW1lIHRoYXQgdGhlIGZpbGUgd2FzIGxhc3QgbW9kaWZpZWQuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJuYW1lIG9mIHRoZSBmaWxlIG9yIGRpcmVjdG9yeS4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJtdWx0aXBsZSBvcHRpb25zIGNhbiBiZSB1c2VkIHRvZ2V0aGVyLCBsaWtlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibHMgLWFsdCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoImxzICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLWFsdCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBsaXN0cyBhbGwgY29udGVudHMsIGluY2x1ZGluZyBoaWRkZW4gZmlsZXMgYW5kIGRpcmVjdG9yaWVzLCBpbiBsb25nIGZvcm1hdCwgb3JkZXJlZCBieSB0aGUgZGF0ZSBhbmQgdGltZSB0aGV5IHdlcmUgbGFzdCBtb2RpZmllZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5yYXBpZHRhYmxlcy5jb20vY29kZS9saW51eC9scy5odG1sIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJscyBjb21tYW5kIG1haW4gb3B0aW9ucyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJvcGVuIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNvcGVuIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgb3BlbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJvcGVuLiIpXSksCiAgICAgICAgX3ZtLl92KCIgb3BlbnMgdGhlIGN1cnJlbnQgZm9sZGVyIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoJ29wZW4gLWEgIlZpc3VhbCBTdHVkaW8gQ29kZSInKV0pLAogICAgICAgIF92bS5fdigiIG9wZW4gYXBwbGljYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignb3BlbiAtYSAidmlzdWFsIHN0dWRpbyBjb2RlIiBpbmRleC5tZCcpXSksCiAgICAgICAgX3ZtLl92KCIgb3BlbiBmaWxlIHdpdGggYXBwbGljYXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNhdCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY2F0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgY2F0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNhdCIpXSksCiAgICAgICAgX3ZtLl92KCIgY29tbWFuZCBvdXRwdXRzIHRoZSBjb250ZW50cyBvZiBhIHNwZWNpZmllZCBmaWxlLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiY3AtY29weSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY3AtY29weSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIGNwIC0gQ29weSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjcCIpXSksCiAgICAgICAgX3ZtLl92KCIgY29weSBmaWxlcyBvciBkaXJlY3RvcmllcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNwIHNvdXJjZS50eHQgZGVzdGluYXRpb24udHh0XG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiLT4gY29weSB0aGUgY29udGVudHMgb2YgYSBzb3VyY2UgZmlsZSBpbnRvIGEgZGVzdGluYXRpb24gZmlsZToiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjcCBzb3VyY2UudHh0IGRlc3RpbmF0aW9uL1xuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIi0+IGNvcHkgYSBmaWxlIHRvIGEgZGVzdGluYXRpb24gZGlyZWN0b3J5OiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoImNvcHkgbXVsdGlwbGUgZmlsZXMgaW50byBhIGRpcmVjdG9yeSwgdXNlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY3AiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2l0aCBhIGxpc3Qgb2Ygc291cmNlIGZpbGVzIGFzIHRoZSBmaXJzdCBhcmd1bWVudHMsIGFuZCB0aGUgZGVzdGluYXRpb24gZGlyZWN0b3J5IGFzIHRoZSBsYXN0IGFyZ3VtZW50LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNwIGZpbGUxLnR4dCBmaWxlMi50eHQgbXlfZGlyZWN0b3J5L1xuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ3aWxkY2FyZHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3dpbGRjYXJkcyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2lsZGNhcmRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAid2UgY2FuIHVzZSBzcGVjaWFsIGNoYXJhY3RlcnMgbGlrZSAqIHRvIHNlbGVjdCBncm91cHMgb2YgZmlsZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY3AgKiBteV9kaXJlY3RvcnkvXG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJjb3B5IGFsbCBmaWxlcyBpbiB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBpbnRvIGFub3RoZXIgZGlyZWN0b3J5LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNwIHcqLnR4dCBteV9kaXJlY3RvcnkvXG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJzZWxlY3RzIGFsbCBmaWxlcyBpbiB0aGUgd29ya2luZyBkaXJlY3Rvcnkgc3RhcnRpbmcgd2l0aCDigJx34oCdIChwcmVmaXgpIGFuZCBlbmRpbmcgd2l0aCDigJwudHh04oCdIChzdWZmaXgpLCBhbmQgY29waWVzIHRoZW0gdG8gIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIipteV9kaXJlY3RvcnkvKiIpXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJtdi1tb3ZlIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNtdi1tb3ZlIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgbXYgLSBNb3ZlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoInNpbWlsYXIgdG8gY3AgaW4gaXRzIHVzYWdlLCBhbHNvOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibXYgZmlsZV9vcmlnaW4udHh0IGZpbGVfcmVuYW1lZC50eHRcbiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi0+VG8gcmVuYW1lIGEgZmlsZSwgdXNlIG12IHdpdGggdGhlIG9sZCBmaWxlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCBhbmQgdGhlIG5ldyBmaWxlIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigidHJpY2s6IHJlbmFtZToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm12IGluZGV4Lmh0bWwgYWJvdXQuaHRtbFxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJybS1kZWxldGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JtLWRlbGV0ZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgcm0gLSBEZWxldGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigicm0gLXIiKV0pLCBfdm0uX3YoIiByZW1vdmVzIGRpcmVjdG9yaWVzIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLXIiKV0pLAogICAgICAgIF92bS5fdigiIGlzIGFuIG9wdGlvbiB0aGF0IG1vZGlmaWVzIHRoZSBiZWhhdmlvciBvZiB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJybSIpXSksCiAgICAgICAgX3ZtLl92KCIgY29tbWFuZC4gVGhlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLXIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc3RhbmRzIGZvciDigJxyZWN1cnNpdmUs4oCdIGFuZCBpdOKAmXMgdXNlZCB0byBkZWxldGUgYSBkaXJlY3RvcnkgYW5kIGFsbCBvZiBpdHMgY2hpbGQgZGlyZWN0b3JpZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicm0gLXIgdW53YW50ZWRfZGlyZWN0b3J5XG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQmUgY2FyZWZ1bCB3aGVuIHlvdSB1c2UgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJybSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiEgSXQgZGVsZXRlcyBmaWxlcyBhbmQgZGlyZWN0b3JpZXMgcGVybWFuZW50bHkuIFRoZXJlIGlzbuKAmXQgYW4gdW5kZWxldGUgY29tbWFuZCwgc28gb25jZSB5b3UgZGVsZXRlIGEgZmlsZSBvciBkaXJlY3Rvcnkgd2l0aCAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJtIildKSwKICAgICAgICBfdm0uX3YoIiwgaXTigJlzIGdvbmUuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzdWRvIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzdWRvIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdWRvIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiLT4gc3VwZXIgVXNlciBkbyAtPiBBZG1pbi1SaWdodHMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInN1ZG8gcm0gLXJmIC0tbm8tcHJlc2VydmUtcm9vdC8iKV0pLAogICAgICAgICAgX3ZtLl92KCIgZXJhc2UgZW50aXJlIGRyaXZlLCBubyByZWNvdmVyeSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJpLW8tcmVkaXJlY3Rpb24iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ktby1yZWRpcmVjdGlvbiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgKEkvTykgcmVkaXJlY3Rpb24uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8gZGlyZWN0IHRoZSBpbnB1dCBhbmQgb3V0cHV0IG9mIGEgY29tbWFuZCB0byBhbmQgZnJvbSBvdGhlciBmaWxlcyBhbmQgcHJvZ3JhbXMsIGFuZCB0byBjaGFpbiBjb21tYW5kcyB0b2dldGhlciBpbiBhIHBpcGVsaW5lIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInN0ZGluIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigic3RhbmRhcmQgaW5wdXQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBpbmZvcm1hdGlvbiBpbnB1dHRlZCBpbnRvIHRoZSB0ZXJtaW5hbCB0aHJvdWdoIHRoZSBrZXlib2FyZCBvciBpbnB1dCBkZXZpY2UuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzdGRvdXQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJzdGFuZGFyZCBvdXRwdXQiKV0pLAogICAgICAgICAgX3ZtLl92KCI6IGluZm9ybWF0aW9uIG91dHB1dHRlZCBhZnRlciBhIHByb2Nlc3MgaXMgcnVuLiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInN0ZGVyciIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoInN0YW5kYXJkIGVycm9yIildKSwKICAgICAgICAgIF92bS5fdigiOiAgYW4gZXJyb3IgbWVzc2FnZSBvdXRwdXR0ZWQgYnkgYSBmYWlsZWQgcHJvY2Vzcy4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlJlZGlyZWN0aW9uIHJlcm91dGVzIHN0YW5kYXJkIGlucHV0LCBzdGFuZGFyZCBvdXRwdXQsIGFuZCBzdGFuZGFyZCBlcnJvciB0byBvciBmcm9tIGEgZGlmZmVyZW50IGxvY2F0aW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgImUuZy4gcmVkaXJlY3RzIHN0YW5kYXJkIG91dHB1dCBvZiBhIGNvbW1hbmQgdG8gYSBmaWxlLCBvdmVyd3JpdGluZyBwcmV2aW91cyBjb250ZW50LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJyZWRpcmVjdHMgdGhlIHN0YW5kYXJkIG91dHB1dCB0byBhIGZpbGUiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoJ2VjaG8gIkhlbGxvIiA+IGhlbGxvLnR4dFxuJyldKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnIkhlbGxvIiBpcyBlbnRlcmVkIGFzIHRoZSBzdGFuZGFyZCBpbnB1dCwgYW5kIGlzIHRoZW4gcmVkaXJlY3RlZCB0byB0aGUgZmlsZSAnCiAgICAgICAgKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiaGVsbG8udHh0IildKSwKICAgICAgICBfdm0uX3YoIiBieSA+IC4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIkIGNhdCBkZXNlcnRzLnR4dCA+IGZvcmVzdHMudHh0XG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI+IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJ0YWtlcyB0aGUgc3RhbmRhcmQgb3V0cHV0IG9mIHRoZSBjb21tYW5kIG9uIHRoZSBsZWZ0LCBhbmQgcmVkaXJlY3RzIGl0IHRvIHRoZSBmaWxlIG9uIHRoZSByaWdodC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiTm90ZSB0aGF0ID4gb3ZlcndyaXRlcyBhbGwgb3JpZ2luYWwgY29udGVudCIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICItMiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjLTIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIj4+IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJyZWRpcmVjdHMgc3RhbmRhcmQgb3V0cHV0IG9mIGEgY29tbWFuZCB0byBhIGZpbGUsIGFwcGVuZGluZyBuZXcgY29udGVudCB0byBvbGQgY29udGVudC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJpZiB3ZSB3YW50IHRvIGJlIGFibGUgdG8gYWRkIHRvIGEgZmlsZSB3aXRob3V0IGxvc2luZyB0aGUgb3JpZ2luYWwgdGV4dD8gV2UgY2FuIHVzZSB0aGUgPj4gY29tbWFuZCEiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIi0zIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiMtMyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoInJlZGlyZWN0cyBzdGFuZGFyZCBpbnB1dCB0byBhIGNvbW1hbmQuIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiPCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0YWtlcyB0aGUgc3RhbmRhcmQgaW5wdXQgZnJvbSB0aGUgZmlsZSBvbiB0aGUgcmlnaHQgYW5kIGlucHV0cyBpdCBpbnRvIHRoZSBwcm9ncmFtIG9uIHRoZSBsZWZ0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImNhdCA8IGRlc2VydHMudHh0XG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIi00IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiMtNCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigifCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInwiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgYSDigJxwaXBlLuKAnSByZWRpcmVjdHMgc3RhbmRhcmQgb3V0cHV0IG9mIGEgY29tbWFuZCB0byBhbm90aGVyIGNvbW1hbmQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJzb3J0IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzb3J0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzb3J0IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJzb3J0IHRha2VzIHRoZSBzdGFuZGFyZCBpbnB1dCBhbmQgb3JkZXJzIGl0IGFscGhhYmV0aWNhbGx5IGZvciB0aGUgc3RhbmRhcmQgb3V0cHV0IChpdCBkb2VzbuKAmXQgY2hhbmdlIHRoZSBmaWxlIGl0c2VsZikiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigic29ydHMgbGluZXMgb2YgdGV4dCBhbHBoYWJldGljYWxseS4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiQgc29ydCBjb250aW5lbnRzLnR4dFxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoIiQgY2F0IGdsYWNpZXJzLnR4dCB8IHNvcnQgPiBzb3J0ZWQtZ2xhY2llcnMudHh0XG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgInRha2VzIHRoZSBzdGFuZGFyZCBvdXRwdXQgZnJvbSBjYXQgZ2xhY2llcnMudHh0IGFuZCDigJxwaXBlc+KAnSBpdCB0byBzb3J0LiBUaGUgc3RhbmRhcmQgb3V0cHV0IG9mIHNvcnQgaXMgcmVkaXJlY3RlZCB0byBhIG5ldyBmaWxlIG5hbWVkICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzb3J0ZWQtZ2xhY2llcnMudHh0IildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIndjLXdvcmQtY291bnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3djLXdvcmQtY291bnQiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigid2MiKV0pLAogICAgICAgIF92bS5fdigiIHdvcmQgY291bnQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInVuaXEiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3VuaXEiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInVuaXEiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLigJx1bmlxdWUu4oCdIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIkZpbHRlcnMgb3V0IGFkamFjZW50LCBkdXBsaWNhdGUgbGluZXMgaW4gYSBmaWxlLiIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJBbiBlZmZlY3RpdmUgd2F5IHRvIHVzZSAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ1bmlxIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgaXMgdG8gY2FsbCAiKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzb3J0IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgdG8gYWxwaGFiZXRpemUgYSBmaWxlLCBhbmQg4oCccGlwZeKAnSB0aGUgc3RhbmRhcmQgb3V0cHV0IHRvIHVuaXE6IEhlcmUgd2Ugc2ltcGx5IHNlbmQgZmlsdGVyZWQgY29udGVudHMgdG8gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigidW5pcS1kZXNlcnRzLnR4dCIpXSksCiAgICAgICAgICAgIF92bS5fdigiLCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJzb3J0IGRlc2VydHMudHh0IHwgdW5pcSA+IHVuaXEtZGVzZXJ0cy50eHRcbiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJncmVwIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNncmVwIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJncmVwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigi4oCcZ2xvYmFsIHJlZ3VsYXIgZXhwcmVzc2lvbiBwcmludOKAnSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigic2VhcmNoZXMgZm9yIGEgdGV4dCBwYXR0ZXJuIGFuZCBvdXRwdXRzIGl0LiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAic2VhcmNoZXMgZmlsZXMgZm9yIGxpbmVzIHRoYXQgbWF0Y2ggYSBwYXR0ZXJuIGFuZCB0aGVuIHJldHVybnMgdGhlIHJlc3VsdHMuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImNhc2Ugc2Vuc2l0aXZlLiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJCBncmVwIEV1cm9wZSBjb250aW5lbnRzLnR4dFxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoImdyZXAgc2VhcmNoZWQgZm9yIGFueXRoaW5nIHRoYXQgbWF0Y2hlZCDigJxFdXJvcGXigJ0gaW4gIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImNvbnRpbmVudHMudHh0IildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJjb2RlIiwgW192bS5fdigiZ3JlcCAtaSIpXSksIF92bS5fdigiICBjYXNlIGluc2Vuc2l0aXZlIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ3JlcCAtUiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBzZWFyY2hlcyBhbGwgZmlsZXMgaW4gYSBkaXJlY3RvcnkgYW5kIG91dHB1dHMgZmlsZW5hbWVzIGFuZCBsaW5lcyBjb250YWluaW5nIG1hdGNoZWQgcmVzdWx0cy4gLVIgc3RhbmRzIGZvciDigJxyZWN1cnNpdmXigJ0uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImdyZXAgLVIgQXJjdGljIC9ob21lL2NjdXNlci93b3Jrc3BhY2UvZ2VvZ3JhcGh5XG4vaG9tZS9jY3VzZXIvd29ya3NwYWNlL2dlb2dyYXBoeS9kZXNlcnRzLnR4dDpBcmN0aWMgRGVzZXJ0XG4vaG9tZS9jY3VzZXIvd29ya3NwYWNlL2dlb2dyYXBoeS9vY2VhbnMudHh0OkFyY3RpYyBPY2VhblxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdyZXAgLVIiKV0pLAogICAgICAgIF92bS5fdigiIHNlYXJjaGVkIHRoZSAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiL2hvbWUvY2N1c2VyL3dvcmtzcGFjZS9nZW9ncmFwaHkiKV0pLAogICAgICAgIF92bS5fdigiIGRpcmVjdG9yeSBmb3IgdGhlIHN0cmluZyDigJxBcmN0aWPigJ0gYW5kIG91dHB1dHRlZCAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiZmlsZW5hbWVzIGFuZCBsaW5lcyIpXSksCiAgICAgICAgX3ZtLl92KCIgd2l0aCBtYXRjaGluZyByZXN1bHRzLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJncmVwIC1SbCIpXSksCiAgICAgICAgX3ZtLl92KCIgc2VhcmNoZXMgYWxsIGZpbGVzIGluIGEgZGlyZWN0b3J5IGFuZCBvdXRwdXRzICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJvbmx5IGZpbGVuYW1lcyIpXSksCiAgICAgICAgX3ZtLl92KCIgd2l0aCBtYXRjaGVkIHJlc3VsdHMgKG5vIGxpbmVzKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2VkIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNzZWQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNlZCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIuKAnHN0cmVhbSBlZGl0b3Iu4oCdIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJzZWFyY2hlcyBmb3IgYSB0ZXh0IHBhdHRlcm4sIG1vZGlmaWVzIGl0LCBhbmQgb3V0cHV0cyBpdC4iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJhY2NlcHRzIHN0YW5kYXJkIGlucHV0IGFuZCBtb2RpZmllcyBpdCBiYXNlZCBvbiBhbiAiKSwKICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigiZXhwcmVzc2lvbiIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLCBiZWZvcmUgZGlzcGxheWluZyBpdCBhcyBvdXRwdXQgZGF0YS4gc2ltaWxhciB0byDigJxmaW5kIGFuZCByZXBsYWNlLuKAnSIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzZWQgJ3Mvc25vdy9yYWluLycgZm9yZXN0cy50eHRcbiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiczogc3RhbmRzIGZvciDigJxzdWJzdGl0dXRpb24u4oCdIEl0IGlzICIpLAogICAgICAgICAgX2MoImVtIiwgW192bS5fdigiYWx3YXlzIildKSwKICAgICAgICAgIF92bS5fdigiIHVzZWQgd2hlbiB1c2luZyBzZWQgZm9yIHN1YnN0aXR1dGlvbi4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigic2VhcmNoZXMgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiZm9yZXN0cy50eHQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGZvciB0aGUgd29yZCDigJxzbm934oCdIGFuZCByZXBsYWNlcyBpdCB3aXRoIOKAnHJhaW4u4oCdIFdpbGwgb25seSByZXBsYWNlIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiDigJxzbm934oCdIG9uIGEgbGluZS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2VkICdzL3Nub3cvcmFpbi9nJyBmb3Jlc3RzLnR4dFxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnIildKSwKICAgICAgICAgIF92bS5fdigiIGV4cHJlc3Npb24sIG1lYW5pbmcg4oCcZ2xvYmFsLiAiKSwKICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImFsbCIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpbnN0YW5jZXMgb2Yg4oCcc25vd+KAnSBvbiBhIGxpbmUgd2lsbCBiZSB0dXJuZWQgdG8g4oCccmFpbi7igJ0iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidGhlLW5hbm8tZWRpdG9yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN0aGUtbmFuby1lZGl0b3IiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRoZSBOYW5vLWVkaXRvciIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJuYW5vIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIklmIHlvdSBhcmUgaGF2aW5nIHRyb3VibGUgaW4gbmFubyBhbmQgbmVlZCB0byBleGl0LCB1c2UgQ3RybCArIEMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ3RybCArIE8gc2F2ZXMgYSBmaWxlLiBPIHN0YW5kcyBmb3Igb3V0cHV0LiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJDdHJsICsgWCBleGl0cyB0aGUgbmFubyBwcm9ncmFtLiBYIHN0YW5kcyBmb3IgZXhpdC4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkN0cmwgKyBHIG9wZW5zIGEgaGVscCBtZW51LiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoImh0dHBzOi8vd3d3Lm5hbm8tZWRpdG9yLm9yZy8iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidmltLWVkaXRvciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjdmltLWVkaXRvciIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVklNIGVkaXRvciIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiS2V5IildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIkNvbW1hbmQiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiaSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJpbnNlcnQgbW9kZSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbX2MoInRkIiwgW192bS5fdigiZXNjIildKSwgX3ZtLl92KCIgIiksIF9jKCJ0ZCIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFtfYygidGQiLCBbX3ZtLl92KCI6d3EiKV0pLCBfdm0uX3YoIiAiKSwgX2MoInRkIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIueCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJleGl0IildKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRoZS1jb21tYW5kLWxpbmUtZW52aXJvbm1lbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3RoZS1jb21tYW5kLWxpbmUtZW52aXJvbm1lbnQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUaGUgY29tbWFuZCBsaW5lIGVudmlyb25tZW50IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlByZWZlcmVuY2VzIGFuZCBzZXR0aW5ncyBvZiB0aGUgY3VycmVudCB1c2VyLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYmFzaC16c2gtcHJvZmlsZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYmFzaC16c2gtcHJvZmlsZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJhc2gvenNoIFByb2ZpbGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiaXMgYSBmaWxlIHVzZWQgdG8gc3RvcmUgZW52aXJvbm1lbnQgc2V0dGluZ3MgZm9yIHlvdXIgdGVybWluYWwiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigifi8uYmFzaF9wcm9maWxlIildKSwKICAgICAgICBfdm0uX3YoIiBvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIn4vLnpzaHJjIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUaGUgfiByZXByZXNlbnRzIHRoZSB1c2Vy4oCZcyBob21lIGRpcmVjdG9yeS4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRoZSAuIGluZGljYXRlcyBhIGhpZGRlbiBmaWxlLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJUaGUgbmFtZSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigifi8uYmFzaF9wcm9maWxlIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBpcyBpbXBvcnRhbnQsIHRoaXMgaXMgaG93IHRoZSBjb21tYW5kIGxpbmUgcmVjb2duaXplcyB0aGUgYmFzaCBwcm9maWxlIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJUbyBvcGVuIGFuZCBlZGl0IHRoZSBiYXNoIHByb2ZpbGUsIHlvdSBjYW4gdXNlIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuYW5vIH4vLmJhc2hfcHJvZmlsZVxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoImZvciB6c2g6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJuYW5vIH4vLnpzaHJjXG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVG8gYWN0aXZhdGUgdGhlIGNoYW5nZXMgbWFkZSBpbiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIn4vLmJhc2hfcHJvZmlsZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBmb3IgdGhlIGN1cnJlbnQgc2Vzc2lvbiwgdXNlIHRoaXMgZm9sbG93aW5nIGNvbW1hbmQgKHdpdGhvdXQgY2xvc2luZyB0aGUgdGVybWluYWwpOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZSB+Ly5iYXNoX3Byb2ZpbGVcbiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJmb3IgenNoIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzb3VyY2Ugfi8uenNocmNcbiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYWxpYXMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2FsaWFzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgYWxpYXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiY3JlYXRlIHNob3J0dWN0cyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoJ2FsaWFzIHBkPSJwd2QiXG5hbGlhcyBoeT0iaGlzdG9yeSJcbmFsaWFzIGxsPSJscyAtbGEiXG4nKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogIm15LXBlcnNvbmFsLWFsaWFzLXNldHVwIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNteS1wZXJzb25hbC1hbGlhcy1zZXR1cCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE15IFBlcnNvbmFsIEFsaWFzLVNldHVwIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJ2FsaWFzIHpzaHJjPSJzb3VyY2Ugfi8uenNocmMiXG5hbGlhcyB6cz0iY29kZSB+Ly56c2hyYyJcbmFsaWFzIGM9ImNsZWFyIiBcbmFsaWFzIGdzPSJnaXQgc3RhdHVzIlxuYWxpYXMgZ2M9ImdpdCBjaGVja291dCJcbmFsaWFzIGdiPSJnaXQgYnJhbmNoIlxuYWxpYXMgZ2w9ImdpdCBsZyJcbmFsaWFzIGdwPSJnaXQgcHVzaCJcbmFsaWFzIGdjYj0iZ2l0IGNoZWNrb3V0IC1iIlxuYWxpYXMgZ2FjPSJnaXQgYWRkIC4gJiYgZ2l0IGNvbW1pdCAtbSJcblxuYWxpYXMgbnJkPSJucG0gcnVuIGRldiJcbmFsaWFzIG89Im9wZW4iXG5hbGlhcyBMPSJscyAtbEYiXG5hbGlhcyBsPSJscyAtRiJcbmFsaWFzIMO8PSJjZCAuLiJcbicKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZW52aXJvbm1lbnQtdmFyaWFibGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNlbnZpcm9ubWVudC12YXJpYWJsZXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBFbnZpcm9ubWVudCBWYXJpYWJsZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoIkVudmlyb25tZW50IHZhcmlhYmxlcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiAgY2FuIGJlIHVzZWQgYWNyb3NzIGNvbW1hbmRzIGFuZCBwcm9ncmFtcyBhbmQgaG9sZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZW52aXJvbm1lbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoInN0b3JlIHRoaXMgaW4gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ+Ly5iYXNoX3Byb2ZpbGUiKV0pLAogICAgICAgIF92bS5fdigiIChvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIn4vLnpzaHJjIildKSwKICAgICAgICBfdm0uX3YoIiApIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoInNldCBhbmQgZXhwb3J0IGFuIGVudmlyb25tZW50IHZhcmlhYmxlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdignZXhwb3J0IFZBUklBQkxFPSJWYWx1ZSJcbicpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJleHBvcnQiKV0pLAogICAgICAgIF92bS5fdigiIG1ha2VzIHRoZSB2YXJpYWJsZSB0byAgYXZhaWxhYmxlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJVU0VSIildKSwKICAgICAgICAgIF92bS5fdigiIGlzIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IHVzZXIuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoJ2V4cG9ydCBVU0VSPSJKYW5lIERvZSInKV0pLAogICAgICAgICAgX3ZtLl92KCIgc2V0cyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgVVNFUi4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigidGhlIGNvbW1hbmQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVjaG8gJFVTRVIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHZhcmlhYmxlLiBOb3RlIHRoYXQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiQiKV0pLAogICAgICAgICAgX3ZtLl92KCIgaXMgYWx3YXlzIHVzZWQgd2hlbiByZXR1cm5pbmcgYSB2YXJpYWJsZeKAmXMgdmFsdWUuIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBTMSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpcyB0aGUgY29tbWFuZCBwcm9tcHQuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCdleHBvcnQgUFMxPSI+PiAiJyldKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSE9NRSIpXSksCiAgICAgICAgICBfdm0uX3YoIiBpcyB0aGUgaG9tZSBkaXJlY3RvcnkuIEl0IGlzIHVzdWFsbHkgbm90IGN1c3RvbWl6ZWQuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJ+IildKSwKICAgICAgICAgIF92bS5fdigiIGlzIHNob3J0IGZvciBIT01FIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBBVEgiKV0pLAogICAgICAgICAgX3ZtLl92KCIgcmV0dXJucyBhIGNvbG9uICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCI6IildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBzZXBhcmF0ZWQgbGlzdCBvZiBmaWxlIHBhdGhzLiBJdCBpcyBjdXN0b21pemVkIGluIGFkdmFuY2VkIGNhc2VzLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVudiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgcmV0dXJucyBhIGxpc3Qgb2YgZW52aXJvbm1lbnQgdmFyaWFibGVzLiBZb3UgY2FuIHJlZGlyZWN0IHRoZSBvdXRwdXQsIHVzaW5nIGdyZXAgdG8gc2VsZWN0IHRoZSB2YXJpYWJsZSB5b3Ugd2FudCB0byBzZWUuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5jb2RlY2FkZW15LmNvbS9jb3Vyc2VzL2xlYXJuLXRoZS1jb21tYW5kLWxpbmUvYXJ0aWNsZXMvY29tbWFuZC1saW5lLW9mZmxpbmUtcHJvamVjdCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiRXhjZXJjaXNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInpzaCIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjenNoIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgenNoIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1NU1B1LWxZRi1BOCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkxlYXJuIFpzaCBpbiA4MCBNaW51dGVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJyZWxvYWQ6ICIpLCBfYygiY29kZSIsIFtfdm0uX3YoInNvdXJjZSB+Ly56c2hyYyIpXSldKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RpZW5idWkubWVkaXVtLmNvbS91c2luZy1vaC1teS16c2gtZjY1YmU2NDYwZDNmIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiZ2V0dGluZyBzdGFydGVkIHdpdGggb2gtbXktenNoIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWt0WXFPVndueVRzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJVc2UgWnNoIGFuZCBPaC1teS16c2ggdG8gQWx3YXlzIFNob3cgR2l0IFN0YXR1cyBpbiBZb3VyIFRlcm1pbmFsIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3RyYXZpcy5tZWRpYS90b3AtMTItb2gtbXktenNoLXRoZW1lcy1mb3ItcHJvZHVjdGl2ZS1kZXZlbG9wZXJzLyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlRvcCAxMiBPaCBNeSBac2ggVGhlbWVzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2ZtYWNlZG9vLm1lZGl1bS5jb20vb2gtbXktenNoLXdpdGgtcG93ZXJsaW5lLWZvbnRzLXByZXR0eS1zaW1wbGUtYXMteW91LWRlc2VydmUtZmJlN2Y2ZDIzNzIzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigicG93ZXJsaW5lIGZvbnRzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2Jsb2cuemhheXRhbS5jb20vMjAxOS8wNC8xOS9wb3dlcmxpbmUtYW5kLXpzaHMtYWdub3N0ZXItdGhlbWUtaW4tdnMtY29kZS8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJhZ25vc3Rlci10aGVtZSBpbiB2cyBjb2RlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiY29uZmlndXJpbmcgdGhlIHByb210OiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiVkIildKSwKICAgICAgICBfdm0uX3YoIiAsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJS8iKV0pLAogICAgICAgIF92bS5fdigiIEN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkuIElmIGFuIGludGVnZXIgZm9sbG93cyB0aGUg4oCYIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi4oCZLCBpdCBzcGVjaWZpZXMgYSBudW1iZXIgb2YgdHJhaWxpbmcgY29tcG9uZW50cyBvZiB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSB0byBzaG93OyB6ZXJvIG1lYW5zIHRoZSB3aG9sZSBwYXRoLiBBIG5lZ2F0aXZlIGludGVnZXIgc3BlY2lmaWVzIGxlYWRpbmcgY29tcG9uZW50cywgaS5lLiAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiUtMWQiKV0pLAogICAgICAgIF92bS5fdigiIHNwZWNpZmllcyB0aGUgZmlyc3QgY29tcG9uZW50LiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8venNoLnNvdXJjZWZvcmdlLmlvL0RvYy9SZWxlYXNlL1Byb21wdC1FeHBhbnNpb24uaHRtbCNQcm9tcHQtRXhwYW5zaW9uIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigicHJvbXQgcmVmZXJlbmNlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qb3NlbHVpc3EvMWU5NmM1NGZhNGUxZTU2NDc5NDAiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBZGQgR2l0IEJyYW5jaCBOYW1lIHRvIFRlcm1pbmFsIFByb21wdCAoYmFzaCkgIiksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy50aGVtb2Rlcm5jb2Rlci5jb20vYWRkLWdpdC1icmFuY2gtaW5mb3JtYXRpb24tdG8teW91ci16c2gtcHJvbXB0LyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoIkFkZCBHaXQgYnJhbmNoIGluZm9ybWF0aW9uIHRvIHlvdXIgWlNIIHByb21wdCIpLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJpdGVybTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2l0ZXJtMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIGlUZXJtMiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly9zb3VyYWJoYmFqYWouY29tL21hYy1zZXR1cC9pVGVybS9SRUFETUUuaHRtbCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiYWx0ZXJuYXRpdmUgVGVybWluYWwiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAibGlua3MiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2xpbmtzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTGlua3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2V4cGxhaW5zaGVsbC5jb20vIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiRXhwbGFpbnNoZWxsIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5mcmVlY29kZWNhbXAub3JnL25ld3MvdGhlLWxpbnV4LWNvbW1hbmRzLWhhbmRib29rLyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIkxpbnV4IENvbW1hbmRzIEhhbmRib29rIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJbT1NYIEJhc2ggcHJvZmlsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9uYXRlbGFuZGF1LmNvbS9teS1tYWMtb3N4LWJhc2hfcHJvZmlsZS8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmxlYXJuZW5vdWdoLmNvbS9jb21tYW5kLWxpbmUtdHV0b3JpYWwvYmFzaWNzICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9jb21tYW5kbGluZXBvd2VydXNlci5jb20vIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiY29tbWFuZGxpbmVwb3dlcnVzZXIuY29tIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRpcHMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3RpcHMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBUaXBzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoImNtZC1zaGlmdC0uIHNob3dzIGhpZGRlbiBGaWxlcyBpbiBGaW5kZXIiKV0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}