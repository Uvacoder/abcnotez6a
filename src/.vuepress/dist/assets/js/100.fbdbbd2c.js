(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{486:function(t,a,s){"use strict";s.r(a);var e=s(45),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),s("h2",{attrs:{id:"mathematical-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mathematical-operators"}},[t._v("#")]),t._v(" Mathematical operators")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Mathematical operators")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("+")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Addition (and also used for concatenating strings) -> can cause errors, if an element is a string")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Subtraction")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("/")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Division")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("%")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Modulus (Division Remainder)")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("++")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("increment. "),s("code",[t._v("counter++")]),t._v(" is the same as: "),s("code",[t._v("counter = counter + 1")])])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("--")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("decrement")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("**")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Exponentiation (same (but newer) as : "),s("code",[t._v("Math.pow()")]),t._v(")")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"assignment-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assignment-operators"}},[t._v("#")]),t._v(" Assignment Operators")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Assignment Operators")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("assigns a value")])]),t._v(" "),s("tr",[s("td",[t._v("+=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x += is the same as x= x + y")])]),t._v(" "),s("tr",[s("td",[t._v("-=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x -= is the same as x= x - y")])]),t._v(" "),s("tr",[s("td",[t._v("*=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x *= is the same as x= x * y")])]),t._v(" "),s("tr",[s("td",[t._v("/=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x /= is the same as x= x / y")])]),t._v(" "),s("tr",[s("td",[t._v("%=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x %= is the same as x= x % y")])]),t._v(" "),s("tr",[s("td",[t._v("**=")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("x **= is the same as x= x ** y")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"comparison-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comparison-operators"}},[t._v("#")]),t._v(" Comparison Operators")]),t._v(" "),s("p",[t._v("result is always: true=1, false=0")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Comparison Operators")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("==")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("equal to")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("!=")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("not equal")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("<")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("less than")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v(">")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("greater than")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("<=")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("less than or equal to")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v(">=")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("greater than or equal to")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("===")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("equal value and equal type - strict equality (usually preferred)"),s("a",{attrs:{href:"https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a",target:"_blank",rel:"noopener noreferrer"}},[t._v("-> additional Information"),s("OutboundLink")],1)])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("!==")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("not equal value and equal type")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Comparing an object: checks, if they point to the same object in memory")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"truthy-falsy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#truthy-falsy"}},[t._v("#")]),t._v(" Truthy & Falsy")]),t._v(" "),s("p",[t._v("Theese values evaluate to false when checked as a condition (falsy):")]),t._v(" "),s("ul",[s("li",[t._v("0")]),t._v(" "),s("li",[t._v("Empty strings like \"\" or ''")]),t._v(" "),s("li",[s("code",[t._v("null")]),t._v(" which represent when there is no value at all")]),t._v(" "),s("li",[s("code",[t._v("undefined")]),t._v(" which represent when a declared variable lacks a value")]),t._v(" "),s("li",[s("code",[t._v("NaN")]),t._v(", or Not a Number")])]),t._v(" "),s("p",[t._v("this is often used to check, if an object exsits.")]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("!!")]),t._v(" converts truthy/falsy value into real boolean")])]),t._v(" "),s("p",[t._v("Difference when using comparison opreators:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("Truthy & Falsy")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}})])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("(false == 0)")]),t._v(" "),s("code",[t._v("(false === 0)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("(false == '')")]),t._v(" "),s("code",[t._v("(false === '')")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("(0 == '')")]),t._v(" "),s("code",[t._v("(0 === '')")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("(undefined == 0)")]),t._v(" "),s("code",[t._v("(undefined === 0)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("NaN == Nan")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("false. NaN is a non defineable Number. 2 NaN can not be equal")])])])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"logical-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logical-operators"}},[t._v("#")]),t._v(" Logical Operators")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("&&")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("logical AND (both sides need to be true)")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("||")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("logical OR (one side needs to be true)")])]),t._v(" "),s("tr",[s("td",[t._v("!")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("logical NOT (turns true to false and vice versa)")])])])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("!")]),t._v(" not operator reverses, or negates, the value of a boolean:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" excited "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("excited"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints false\t")]),t._v("\n")])])]),s("h2",{attrs:{id:"boolean-tricks-with-logical-operators"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#boolean-tricks-with-logical-operators"}},[t._v("#")]),t._v(" “Boolean Tricks” with Logical Operators")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th"),t._v(" "),s("th",[t._v("Example")]),t._v(" "),s("th",[t._v("Result")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Boolean Coercion via double NOT (double bang) operator")]),t._v(" "),s("td",[s("code",[t._v("!!")])]),t._v(" "),s("td",[s("code",[t._v("!!““")]),t._v(", "),s("code",[t._v("!!1")])]),t._v(" "),s("td",[t._v("false, true")])]),t._v(" "),s("tr",[s("td",[t._v("Default value assignment via OR operator")]),t._v(" "),s("td",[s("code",[t._v("||")])]),t._v(" "),s("td",[s("code",[t._v("const name = someInput || 'Jane'")])]),t._v(" "),s("td",[t._v("someInput if not falsy, ‘Jane’ otherwise")])]),t._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nullish coalescing operator"),s("OutboundLink")],1),t._v(": Use value if condition is true via AND operator")]),t._v(" "),s("td",[s("code",[t._v("&&")])]),t._v(" "),s("td",[s("code",[t._v("const name = isLoggedIn && ‘Jane’")])]),t._v(" "),s("td",[t._v("‘Jane’ is set if "),s("code",[t._v("isLoggedIn")]),t._v(" is true, false otherwise")])])])]),t._v(" "),s("h2",{attrs:{id:"nullish-coalescing-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nullish-coalescing-operator"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nullish coalescing operator"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// here's what we often did for this:")]),t._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some default'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// but this was problematic for numbers or booleans where "0" or "false" are valid values')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// So, if we wanted to support this:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// here's what we had to do before:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a\n  b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// here's what we can do now")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in React:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("DisplayContactName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("contact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("contact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Unknown'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("Example\n")])])]),s("hr"),t._v(" "),s("h2",{attrs:{id:"typeof-operator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeof-operator"}},[t._v("#")]),t._v(" Typeof Operator")]),t._v(" "),s("p",[t._v("Check the data types of the variables -> returns a string of the data type.")]),t._v(" "),s("p",[s("em",[t._v("Syntax: "),s("code",[t._v("typeof")]),t._v(" is a global operator so can be called on any object, "),s("code",[t._v(".length")]),t._v(" is an object attribute and can only be called in the context of an existing object instance.")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unknown1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" unknown1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Output: string")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unknown2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" unknown2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Output: number")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unknown3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" unknown3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Output: boolean")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h2",{attrs:{id:"optional-chaining"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#optional-chaining"}},[t._v("#")]),t._v(" Optional Chaining")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN: Optional chaining"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v('Also known as the "Elvis Operator," this allows you to safely access properties and call functions that may or may not exist. Before optional chaining, we used a hacky-workaround that relied on falsy/truthy-ness.')]),t._v(" "),s("p",[t._v("If you find yourself doing "),s("code",[t._v("?.")]),t._v(" a lot in your code, you might want to consider the place where those values originate and make sure they consistently return the values they should.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// what we did before optional chaining:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" streetName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("address"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("street"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// what we can do now:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" streetName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("address"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("street"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this will run even if options is undefined (in which case, onSuccess would be undefined as well)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// however, it will still fail if options was never declared,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// since optional chaining cannot be used on a non-existent root object.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// optional chaining does not replace checks like if (typeof options == "undefined")')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" onSuccess "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("onSuccess\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this will run without error even if onSuccess is undefined (in which case, no function will be called)")]),t._v("\nonSuccess"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yay'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and we can combine those things into a single line:")]),t._v("\noptions"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("onSuccess"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yay'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and if you are 100% certain that onSuccess is a function if options exists")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// then you don't need the extra ?. before calling it. Only use ?. in situations")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// where the thing on the left might not exist.")]),t._v("\noptions"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onSuccess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yay'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in React:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UserProfile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("strong"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bio"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),t._v("short "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("??")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'No bio provided'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("strong"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("hr")])}),[],!1,null,null,null);a.default=n.exports}}]);