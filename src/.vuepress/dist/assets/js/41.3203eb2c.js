(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{419:function(e,t,s){"use strict";s.r(t);var a=s(45),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"naming-cleancode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#naming-cleancode"}},[e._v("#")]),e._v(" Naming - CleanCode")]),e._v(" "),s("p",[e._v("Naming things ("),s("em",[e._v("= variables, properties, functions, methods, classes")]),e._v(") correctly and in an understandable way if "),s("strong",[e._v("an extremely important part of writing clean code.")])]),e._v(" "),s("p",[e._v("This will of course still require some practice and often "),s("strong",[e._v("multiple iterations")]),e._v(" - clean code is written by iterating and improving code over time!")]),e._v(" "),s("h2",{attrs:{id:"be-descriptive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#be-descriptive"}},[e._v("#")]),e._v(" Be Descriptive")]),e._v(" "),s("p",[e._v("Names have "),s("strong",[e._v("one simple purpose")]),e._v(":")]),e._v(" "),s("p",[e._v("They should "),s("strong",[e._v("describe")])]),e._v(" "),s("ul",[s("li",[e._v("what's stored in a variable or property")]),e._v(" "),s("li",[e._v("or what a function or method does.")]),e._v(" "),s("li",[e._v("Or what kind of object will be created when instantiating a class.")])]),e._v(" "),s("h2",{attrs:{id:"naming-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#naming-rules"}},[e._v("#")]),e._v(" Naming Rules")]),e._v(" "),s("h3",{attrs:{id:"variables-properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variables-properties"}},[e._v("#")]),e._v(" Variables & Properties")]),e._v(" "),s("p",[e._v("Variables and properties hold data - numbers, text (strings), boolean values, objects, lists, arrays, maps etc.")]),e._v(" "),s("p",[e._v("Hence "),s("strong",[e._v("the name should imply which kind of data is being stored")]),e._v(".")]),e._v(" "),s("ul",[s("li",[e._v("should typically receive a "),s("strong",[e._v("noun")]),e._v(" as a name.")]),e._v(" "),s("li",[e._v("example: user, product, customer, database, transaction etc.")])]),e._v(" "),s("p",[e._v("Typically for "),s("strong",[e._v("boolean values")]),e._v(":")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("short phrase with an adjective")])]),e._v(" "),s("li",[e._v("example: isValid, didAuthenticate, isLoggedIn, emailExists etc.")])]),e._v(" "),s("p",[e._v("If you can be more specific, you "),s("strong",[e._v("should")]),e._v(" be more specific:")]),e._v(" "),s("ul",[s("li",[e._v("For example, prefer customer over user if the code  is doing customer-specific operations with that data.")])]),e._v(" "),s("h3",{attrs:{id:"functions-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functions-methods"}},[e._v("#")]),e._v(" Functions & Methods")]),e._v(" "),s("p",[e._v("Functions and methods perform "),s("strong",[e._v("tasks and operations")]),e._v(".")]),e._v(" "),s("ul",[s("li",[e._v("should typically receive a "),s("strong",[e._v("verb")]),e._v(" as a name.")]),e._v(" "),s("li",[e._v("example: login(), createUser(), database.insert(), log() etc.")])]),e._v(" "),s("p",[e._v("Alternatively, they can also be used to primarily produce values -")]),e._v(" "),s("ul",[s("li",[e._v("then, especially when producing "),s("strong",[e._v("booleans")]),e._v(", you could also go for "),s("strong",[e._v("short phrases with adjectives")]),e._v(".")]),e._v(" "),s("li",[e._v("example: isValid(...), isEmail(...), isEmpty(...) etc.")])]),e._v(" "),s("p",[e._v("Try to "),s("strong",[e._v("avoid")]),e._v(" names like email(), user() etc. These names sound like properties. Prefer getEmail() etc. instead.")]),e._v(" "),s("p",[e._v("As with variables and properties, if you can "),s("strong",[e._v("be more specific")]),e._v(", it typically makes sense to use such more specific names. For example: createUser() instead of just create().")]),e._v(" "),s("h3",{attrs:{id:"classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classes"}},[e._v("#")]),e._v(" Classes")]),e._v(" "),s("p",[e._v("Classes are used to "),s("strong",[e._v("create objects")]),e._v(" (unless it's a static class).")]),e._v(" "),s("p",[e._v("The class name should "),s("strong",[e._v("describe the kind of object it will create")]),e._v(".")]),e._v(" "),s("p",[e._v("Even if it's a static class (i.e. it won't be instantiated), you will still use it as some kind of container for various pieces of data and/ or functionality - so you should then describe that container.")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Good class names - (like variable and property) - are therefore "),s("strong",[e._v("nouns")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("example: User, Product,RootAdministrator, Transaction, Payment etc.")])])]),e._v(" "),s("h2",{attrs:{id:"avoid-generic-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#avoid-generic-names"}},[e._v("#")]),e._v(" Avoid Generic Names")]),e._v(" "),s("p",[e._v("In most situations, you should "),s("strong",[e._v("avoid generic names")]),e._v(" like handle(), process(), data, item etc.")]),e._v(" "),s("p",[e._v("There can always be situations where it makes sense but typically, you should")]),e._v(" "),s("ul",[s("li",[e._v("either make these names more specific (e.g. processTransaction())")]),e._v(" "),s("li",[e._v("or go for a different kind of name (e.g. product instead of item).")])]),e._v(" "),s("h2",{attrs:{id:"be-consistent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#be-consistent"}},[e._v("#")]),e._v(" Be Consistent")]),e._v(" "),s("p",[e._v("An important part of using proper names is "),s("strong",[e._v("consistency")]),e._v(".")]),e._v(" "),s("p",[e._v("If you used fetchUsers() in one part of your code, you should also use fetchProducts() - and not getProducts() - in another part of that same code.")]),e._v(" "),s("p",[e._v("It doesn't matter if you prefer fetch...(), get...(), retrieve...() or any other term but you should be consistent!")])])}),[],!1,null,null,null);t.default=i.exports}}]);