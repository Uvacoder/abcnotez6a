(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{504:function(t,e,a){"use strict";a.r(e);var s=a(45),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),a("h2",{attrs:{id:"mathematical-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mathematical-operators"}},[t._v("#")]),t._v(" Mathematical operators")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Mathematical operators")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("+")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Addition (and also used for concatenating strings) -> can cause errors, if an element is a string")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Subtraction")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Division")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("%")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Modulus (Division Remainder)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("++")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("increment. "),a("code",[t._v("counter++")]),t._v(" is the same as: "),a("code",[t._v("counter = counter + 1")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("--")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("decrement")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("**")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Exponentiation (same (but newer) as : "),a("code",[t._v("Math.pow()")]),t._v(")")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"assignment-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assignment-operators"}},[t._v("#")]),t._v(" Assignment Operators")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Assignment Operators")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("assigns a value")])]),t._v(" "),a("tr",[a("td",[t._v("+=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("x += is the same as x= x + y")])]),t._v(" "),a("tr",[a("td",[t._v("-=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("x -= is the same as x= x - y")])]),t._v(" "),a("tr",[a("td",[t._v("*=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("x *= is the same as x= x * y")])]),t._v(" "),a("tr",[a("td",[t._v("/=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("x /= is the same as x= x / y")])]),t._v(" "),a("tr",[a("td",[t._v("%=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("x %= is the same as x= x % y")])]),t._v(" "),a("tr",[a("td",[t._v("**=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("x **= is the same as x= x ** y")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"comparison-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-operators"}},[t._v("#")]),t._v(" Comparison Operators")]),t._v(" "),a("p",[t._v("result is always: true=1, false=0")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Comparison Operators")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("==")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("equal to")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("not equal")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("less than")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("greater than")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("less than or equal to")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("greater than or equal to")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("===")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("equal value and equal type - strict equality (usually preferred)"),a("a",{attrs:{href:"https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a",target:"_blank",rel:"noopener noreferrer"}},[t._v("-> additional Information"),a("OutboundLink")],1)])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!==")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("not equal value and equal type")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Comparing an object: checks, if they point to the same object in memory")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"truthy-falsy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#truthy-falsy"}},[t._v("#")]),t._v(" Truthy & Falsy")]),t._v(" "),a("p",[t._v("Theese values evaluate to false when checked as a condition (falsy):")]),t._v(" "),a("ul",[a("li",[t._v("0")]),t._v(" "),a("li",[t._v("Empty strings like \"\" or ''")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v(" which represent when there is no value at all")]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v(" which represent when a declared variable lacks a value")]),t._v(" "),a("li",[a("code",[t._v("NaN")]),t._v(", or Not a Number")])]),t._v(" "),a("p",[t._v("this is often used to check, if an object exsits.")]),t._v(" "),a("p",[t._v("Difference when using comparison opreators:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Truthy & Falsy")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}})])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("(false == 0)")]),t._v(" "),a("code",[t._v("(false === 0)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("(false == '')")]),t._v(" "),a("code",[t._v("(false === '')")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("(0 == '')")]),t._v(" "),a("code",[t._v("(0 === '')")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("(undefined == 0)")]),t._v(" "),a("code",[t._v("(undefined === 0)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("true false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("NaN == Nan")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("false. NaN is a non defineable Number. 2 NaN can not be equal")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"logical-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logical-operators"}},[t._v("#")]),t._v(" Logical Operators")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("&&")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("logical AND (both sides need to be true)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("||")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("logical OR (one side needs to be true)")])]),t._v(" "),a("tr",[a("td",[t._v("!")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("logical NOT (turns true to false and vice versa)")])])])]),t._v(" "),a("p",[t._v("The ! not operator reverses, or negates, the value of a boolean:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" excited "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("excited"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints false")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"typeof-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-operator"}},[t._v("#")]),t._v(" Typeof Operator")]),t._v(" "),a("p",[t._v("Check the data types of the variables -> returns a string of the data type.")]),t._v(" "),a("p",[a("em",[t._v("Syntax: "),a("code",[t._v("typeof")]),t._v(" is a global operator so can be called on any object, "),a("code",[t._v(".length")]),t._v(" is an object attribute and can only be called in the context of an existing object instance.")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unknown1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" unknown1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Output: string")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unknown2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" unknown2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Output: number")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unknown3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" unknown3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Output: boolean")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);