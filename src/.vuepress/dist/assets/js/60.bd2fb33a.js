(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{438:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sql-joins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-joins"}},[t._v("#")]),t._v(" SQL Joins")]),t._v(" "),a("h2",{attrs:{id:"join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" "),a("code",[t._v("JOIN")])]),t._v(" "),a("p",[t._v("Join tables together temporarily - pull data from different tables")]),t._v(" "),a("p",[t._v("Joins follow this pattern:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("column_names"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Can be * or Table.Column")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("left_table"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t\t\t\t\t\t\t\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("right_table"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("left_table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("right_table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("column")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Columns to join on")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" Courses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Teachers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" Courses\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" Teachers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" Courses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("teacher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Teachers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" customers\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("customer_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("customer_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("first line selects all columns from our combined table.")]),t._v(" "),a("li",[t._v("second line specifies the first table that we want to look in, "),a("code",[t._v("orders")])]),t._v(" "),a("li",[t._v("third line uses "),a("code",[t._v("JOIN")]),t._v(" to say that we want to combine information from "),a("code",[t._v("orders")]),t._v(" with "),a("code",[t._v("customers")]),t._v(".")]),t._v(" "),a("li",[t._v("Fourth line tells us how to combine the two tables. Match "),a("code",[t._v("orders")]),t._v(" table’s "),a("code",[t._v("customer_id")]),t._v(" column with "),a("code",[t._v("customers")]),t._v(" table’s "),a("code",[t._v("customer_id")]),t._v(" column.")])]),t._v(" "),a("h4",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),a("p",[t._v("use the syntax "),a("code",[t._v("table_name.column_name")]),t._v(" to be sure that our requests for columns are unambiguous")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("order_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("customer_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" customers\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("customer_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("customer_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("The real power of SQL, however, comes from working with data from multiple tables at once")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" teams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conference "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" conference"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("players"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" average_weight\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" benn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("college_football_players players\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" benn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("college_football_teams teams\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" teams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("school_name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" players"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("school_name\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" teams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conference\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("players"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("weight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v("\n")])])]),a("h4",{attrs:{id:"table-alias"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-alias"}},[t._v("#")]),t._v(" table alias")]),t._v(" "),a("ul",[a("li",[t._v("When performing joins, it's easiest to give your table names aliases by adding a space after the table name and typing the intended name of the alias.")]),t._v(" "),a("li",[t._v("Once you've given a table an alias, you can refer to columns in that table in the "),a("code",[t._v("SELECT")]),t._v(" clause using the alias name.")]),t._v(" "),a("li",[t._v("best practice here is to use all lowercase letters and underscores instead of spaces.")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"inner-join-most-common"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inner-join-most-common"}},[t._v("#")]),t._v(" Inner Join (most common)")]),t._v(" "),a("p",[t._v("When we perform a simple "),a("code",[t._v("JOIN")]),t._v(" (often called an "),a("em",[t._v("inner join")]),t._v(") our result only includes rows that match our "),a("code",[t._v("ON")]),t._v(" condition.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.w3schools.com/sql/sql_join_inner.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.w3schools.com/sql/sql_join_inner.asp"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("oder_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("adsress\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orders\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" customers\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("customer_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n")])])]),a("p",[t._v("-> joins the data from 2 seperate tables")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("a",{attrs:{href:"https://mariadb.com/kb/en/joining-tables-with-join-clauses/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JoiningTables MariaDB"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mariadb.com/kb/en/more-advanced-joins/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Advanced Jouns - MariaDB"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("In our example, we have a table “Courses” and a table “Teachers”. If we want to have each teacher’s name and the courses they teach, this works like this:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT * FROM Teachers;\n+----+----------------+--------------------------------+\n| id | name           | email                          |\n+----+----------------+--------------------------------+\n|  1 | Teresa Holfeld | teresa@hamburgcodingschool.com |\n|  2 | Helder Pereira | helder@hamburgcodingschool.com |\n|  3 | Thomas Hedeler | thomas@hamburgcodingschool.com |\n+----+----------------+--------------------------------+\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT * FROM Courses;\n+----+----------------+-------+---------+\n| id | name           | hours | teacher |\n+----+----------------+-------+---------+\n|  1 | Learn to Code  |\t\t\t24|\t\t\t\t 2|\n|  2 | Git and GitHub |\t\t\t 6|\t\t\t\t 1|\n|  3 | Databases 1    |\t\t\t 6|\t\t\t\t 2|\n|  4 | Databases 2    |\t\t\t 6|\t\t\t   1|\n|  5 | Vue.js         |    24 |       3 |\n+----+----------------+-------+---------+\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT Courses.name, Teachers.name FROM Courses\n-> JOIN Teachers ON Courses.teacher = Teachers.id;\n+----------------+----------------+\n| name           | name           |\n+----------------+----------------+\n| Learn to Code  | Helder Pereira |\n| Git and GitHub | Teresa Holfeld |\n| Databases 1\t\t | Teresa Holfeld |\n| Databases 2\t\t | Helder Pereira |\n| Vue.js\t\t\t\t | Thomas Hedeler |\n+----------------+----------------+\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"join-hcs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join-hcs"}},[t._v("#")]),t._v(" JOIN HCS")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" people\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" roles "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" roles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("-> both must exist")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" people\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" roles "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" roles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("role_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("-> show even if there is no match")]),t._v(" "),a("p",[a("code",[t._v("LEFT JOIN")]),t._v(" -> is most common")]),t._v(" "),a("blockquote",[a("p",[t._v("left/right - ist outer join (in other DBs). join - is inner join")])]),t._v(" "),a("p",[t._v("w3schools -> explains joins very well")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"inner-joins-outer-joins-and-even-more-joins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inner-joins-outer-joins-and-even-more-joins"}},[t._v("#")]),t._v(" Inner Joins, Outer Joins, and even more Joins")]),t._v(" "),a("h4",{attrs:{id:"inner-joins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inner-joins"}},[t._v("#")]),t._v(" Inner Joins")]),t._v(" "),a("p",[t._v("If you want to join two tables, but you only want to see the lines that have a match on both tables, you use an "),a("strong",[t._v("INNER JOIN")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"outer-joins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#outer-joins"}},[t._v("#")]),t._v(" Outer Joins")]),t._v(" "),a("p",[t._v("If you want to see all values, also the ones that don’t have a match, use an "),a("strong",[t._v("OUTER JOIN")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"left-joins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#left-joins"}},[t._v("#")]),t._v(" Left Joins")]),t._v(" "),a("p",[t._v("If you want to see all values from the left table, but you don’t want to see the values from the right table that don’t have a match on the left table, use "),a("strong",[t._v("LEFT JOIN")]),t._v(".")]),t._v(" "),a("p",[t._v("if we want to combine two tables and keep some of the un-matched rows")]),t._v(" "),a("p",[t._v("A "),a("em",[t._v("left join")]),t._v(" will keep all rows from the first table, regardless of whether there is a matching row in the second table.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table1\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" table2\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" table1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[t._v("The first line selects all columns from both tables.")]),t._v(" "),a("li",[t._v("The second line selects "),a("code",[t._v("table1")]),t._v(" (the “left” table).")]),t._v(" "),a("li",[t._v("The third line performs a "),a("code",[t._v("LEFT JOIN")]),t._v(" on "),a("code",[t._v("table2")]),t._v(" (the “right” table).")]),t._v(" "),a("li",[t._v("The fourth line tells SQL how to perform the join (by looking for matching values in column "),a("code",[t._v("c2")]),t._v(").")])]),t._v(" "),a("h4",{attrs:{id:"right-joins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#right-joins"}},[t._v("#")]),t._v(" Right Joins")]),t._v(" "),a("p",[t._v("If you want to see all values from the right table, but not the values from the left table that don’t have a match on the right table, use "),a("strong",[t._v("RIGHT JOIN")]),t._v(".")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"primary-key-vs-foreign-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primary-key-vs-foreign-key"}},[t._v("#")]),t._v(" Primary Key vs Foreign Key")]),t._v(" "),a("p",[t._v("Primary keys have a few requirements:")]),t._v(" "),a("ul",[a("li",[t._v("None of the values can be "),a("code",[t._v("NULL")]),t._v(".")]),t._v(" "),a("li",[t._v("Each value must be unique")]),t._v(" "),a("li",[t._v("A table can not have more than one primary key column.")])]),t._v(" "),a("p",[t._v("When the primary key for one table appears in a different table, it is called a "),a("strong",[t._v("foreign key")]),t._v(".")]),t._v(" "),a("p",[t._v("Generally, the primary key will just be called "),a("code",[t._v("id")]),t._v(". Foreign keys will have more descriptive names.")]),t._v(" "),a("p",[t._v("The most common types of joins will be joining a foreign key from one table with the primary key from another table.")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"cross-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cross-join"}},[t._v("#")]),t._v(" Cross Join")]),t._v(" "),a("p",[t._v("to combine all rows of one table with all rows of another table.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" shirts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shirt_color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   pants"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pants_color\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" shirts\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CROSS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" pants"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("The first two lines select the columns "),a("code",[t._v("shirt_color")]),t._v(" and "),a("code",[t._v("pants_color")]),t._v(".")]),t._v(" "),a("li",[t._v("The third line pulls data from the table "),a("code",[t._v("shirts")]),t._v(".")]),t._v(" "),a("li",[t._v("The fourth line performs a "),a("code",[t._v("CROSS JOIN")]),t._v(" with "),a("code",[t._v("pants")]),t._v(".")])]),t._v(" "),a("p",[t._v("cross joins don’t require an "),a("code",[t._v("ON")]),t._v(" statement.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" premium_users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASE")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      premium_users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("purchase_date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("months\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        premium_users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cancel_date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("months\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v("\n        premium_users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cancel_date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("THEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'active'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ELSE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'not_active'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("END")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'status'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" premium_users\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CROSS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" months"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" riders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("first")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" riders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("last")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cars"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("model\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" riders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cars\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);