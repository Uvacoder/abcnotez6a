(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{462:function(t,e,a){"use strict";a.r(e);var s=a(45),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sql-constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-constraints"}},[t._v("#")]),t._v(" SQL Constraints")]),t._v(" "),a("h2",{attrs:{id:"constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constraints"}},[t._v("#")]),t._v(" Constraints")]),t._v(" "),a("p",[t._v("add information about how a column can be used are invoked after specifying the data type for a column. They can be used to tell the database to reject inserted data that does not adhere to a certain restriction.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CREATE TABLE celebs (\n   id INTEGER PRIMARY KEY, \n   name TEXT UNIQUE,\n   date_of_birth TEXT NOT NULL,\n   date_of_death TEXT DEFAULT 'Not Applicable'\n);\n")])])]),a("hr"),t._v(" "),a("h1",{attrs:{id:"postgresql-constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postgresql-constraints"}},[t._v("#")]),t._v(" POSTGRESQL CONSTRAINTS")]),t._v(" "),a("p",[a("em",[t._v("constraints")]),t._v(" - to safeguard a database and maintain "),a("em",[t._v("data integrity")]),t._v(".")]),t._v(" "),a("ul",[a("li",[t._v("Reject inserts or updates containing values that shouldn’t be inserted into a database table, which can help with preserving data integrity and quality.")]),t._v(" "),a("li",[t._v("Raise an error when they’re violated, which can help with debugging applications that write to the DB.")])]),t._v(" "),a("h3",{attrs:{id:"set-data-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-data-type"}},[t._v("#")]),t._v(" Set Data Type")]),t._v(" "),a("p",[t._v("https://www.postgresql.org/docs/10/datatype.html")]),t._v(" "),a("p",[t._v("PostgreSQL will try to interpret incoming data as the data type the column has been defined as. This process, called "),a("em",[t._v("type casting")]),t._v(", can have mixed results.")]),t._v(" "),a("ul",[a("li",[t._v("If one tries to insert "),a("code",[t._v("1.5")]),t._v(" into our table’s "),a("code",[t._v("hours_available")]),t._v(" column, PostgreSQL will cast this value to "),a("code",[t._v("integer")]),t._v(", round the data, and insert it into the table as "),a("code",[t._v("2")]),t._v(".")]),t._v(" "),a("li",[t._v("If one tries to insert "),a("code",[t._v("1.5")]),t._v(" into the "),a("code",[t._v("email")]),t._v(" column, PostgreSQL will insert this into the database by casting "),a("code",[t._v("1.5")]),t._v(" to "),a("code",[t._v("'1.5'")]),t._v(" even though "),a("code",[t._v("'1.5'")]),t._v(" is not a valid email address.")])]),t._v(" "),a("h3",{attrs:{id:"nullability-constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nullability-constraints"}},[t._v("#")]),t._v(" Nullability Constraints")]),t._v(" "),a("p",[t._v("In some cases, we might enter data into our database without including a value for every column in each row.")]),t._v(" "),a("p",[t._v("we can choose to reject inserts and updates that don’t include data for specific columns by adding a "),a("code",[t._v("NOT NULL")]),t._v(" constraint on those columns.")]),t._v(" "),a("p",[t._v("SQL will raise an error alerting us that these rows violate the constraint and that our insert or update couldn’t be completed.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" talks "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    title "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    speaker_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    estimated_length "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    session_timeslot "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("timestamp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"alter-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#alter-table"}},[t._v("#")]),t._v(" ALTER TABLE")]),t._v(" "),a("p",[t._v("we can use "),a("code",[t._v("ALTER TABLE")]),t._v(" statements to add or remove constraints from existing tables.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" talks\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" session_timeslot "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" talks\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COLUMN")]),t._v(" session_timeslot "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DROP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n")])])]),a("p",[t._v("SQL will reject the addition of the constraint if "),a("code",[t._v("NULL")]),t._v(" values are already present in the column.")]),t._v(" "),a("h4",{attrs:{id:"backfill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backfill"}},[t._v("#")]),t._v(" Backfill")]),t._v(" "),a("p",[a("em",[t._v("Backfilling")]),t._v(" is a term occasionally used in DB engineering to refer to the process of adding or updating past values.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" talks\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'TBD'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" title "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"check-constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-constraints"}},[t._v("#")]),t._v(" Check Constraints")]),t._v(" "),a("p",[t._v("establish specific rules to determine what makes a row valid. For example, In our "),a("code",[t._v("talks")]),t._v(" table, we might want to ensure that the "),a("code",[t._v("estimated_length")]),t._v(" column is:")]),t._v(" "),a("ul",[a("li",[t._v("An integer")]),t._v(" "),a("li",[a("code",[t._v("NOT NULL")])]),t._v(" "),a("li",[t._v("Positive")])]),t._v(" "),a("p",[t._v("use "),a("code",[t._v("CHECK")]),t._v(" statements to implement more precise constraints on our table.")]),t._v(" "),a("p",[t._v("A "),a("code",[t._v("CHECK")]),t._v(" constraint can be written into a "),a("code",[t._v("CREATE TABLE")]),t._v(" statement, or added to an existing table with "),a("code",[t._v("ALTER TABLE")]),t._v(".")]),t._v(" "),a("p",[t._v("list "),a("code",[t._v("CHECK (...)")]),t._v(" following the data type in a "),a("code",[t._v("CREATE TABLE")]),t._v(" statement and write the condition we’d like to test for inside the parentheses. -› must be a SQL statement that can be "),a("strong",[t._v("evaluated as either true or false")]),t._v(".")]),t._v(" "),a("p",[t._v("(similar to the statements in "),a("code",[t._v("WHERE")]),t._v(" clauses)")]),t._v(" "),a("p",[t._v("any logic that you might use in a "),a("code",[t._v("WHERE")]),t._v(" statement  can be applied within a "),a("code",[t._v("CHECK")]),t._v(", including logic that involves multiple columns or conditions.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" talks \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("estimated_length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("We can add additional constraints on a column with multiple "),a("code",[t._v("ALTER TABLE")]),t._v(" statements.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" talks \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("estimated_length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" estimated_length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h5",{attrs:{id:"constraints-that-apply-to-multiple-columns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constraints-that-apply-to-multiple-columns"}},[t._v("#")]),t._v(" constraints that apply to multiple columns")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" talks\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHECK")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("estimated_length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" date_part"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'year'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" session_timeslot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("the "),a("code",[t._v("date_part")]),t._v(" function just returns a portion of the date as an integer (e.g. "),a("code",[t._v("date_part('year' ,'2020-08-01 00:00:00'::date)")]),t._v(" = 2020)")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"unique-constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unique-constraints"}},[t._v("#")]),t._v(" Unique Constraints")]),t._v(" "),a("p",[t._v("It’s a good practice to structure tables such that rows are uniquely identifiable by some combination of attributes.")]),t._v(" "),a("p",[t._v("For Example: To make sure that no two people submit the same email address when they register. To do so we could apply a unique constraint on "),a("code",[t._v("email")]),t._v(".")]),t._v(" "),a("p",[t._v("To identify values in a single column as unique, we specify "),a("code",[t._v("UNIQUE")]),t._v(" following the column name and datatype definitions,")]),t._v(" "),a("p",[t._v("or add later:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE attendees \nADD UNIQUE (email);\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" registrations "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attendee_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    session_timeslot "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("timestamp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    talk_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attendee_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" session_timeslot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("ensures attendees (identified by "),a("code",[t._v("attendee_id")]),t._v(") are registered for only one talk at a time (identified by "),a("code",[t._v("session_timeslot")]),t._v(").")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"primary-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primary-keys"}},[t._v("#")]),t._v(" Primary Keys")]),t._v(" "),a("p",[t._v("A primary key is a column (or set of columns) that "),a("strong",[t._v("uniquely identifies a row within a database table")]),t._v(".")]),t._v(" "),a("p",[t._v("A table can only have one primary key, and in order to be selected as a primary key a column (or set of columns) should:")]),t._v(" "),a("ul",[a("li",[t._v("Uniquely identify that row in the table (like a "),a("code",[t._v("UNIQUE")]),t._v(" constraint)")]),t._v(" "),a("li",[t._v("Contain no null values (like a "),a("code",[t._v("NOT NULL")]),t._v(" constraint)")])]),t._v(" "),a("p",[t._v("(tables are limited to one "),a("code",[t._v("PRIMARY KEY")]),t._v(", but not limited in how many columns can have both "),a("code",[t._v("UNIQUE")]),t._v(" and "),a("code",[t._v("NOT NULL")]),t._v(" constraints.)")]),t._v(" "),a("p",[t._v("primary keys also improve your data model in several other ways:")]),t._v(" "),a("ul",[a("li",[t._v("Many joins will use the primary key from one table to join data with another table")]),t._v(" "),a("li",[t._v("Primary keys can improve query performance")]),t._v(" "),a("li",[t._v("Primary keys help to enforce data integrity within a table by ensuring that rows can be uniquely identified")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE attendees\nADD PRIMARY KEY (id); \n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"foreign-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreign-keys"}},[t._v("#")]),t._v(" Foreign Keys")]),t._v(" "),a("p",[t._v("When discussing relations between tables, you may see the terms "),a("em",[t._v("parent table")]),t._v(" and "),a("em",[t._v("child table")]),t._v(" to describe two tables that are related. -› values inserted into "),a("em",[t._v("child table")]),t._v(" must be validated by data that’s already present in a "),a("em",[t._v("parent table")]),t._v(".")]),t._v(" "),a("p",[t._v("This property that ensures data can be validated by referencing another table in the data model is called "),a("strong",[a("em",[t._v("referential integrity")]),t._v(".")])]),t._v(" "),a("p",[t._v("Referential integrity can be enforced by adding a "),a("code",[t._v("FOREIGN KEY")]),t._v(" on the child table")]),t._v(" "),a("p",[t._v("If the parent table doesn’t contain the data a user is attempting to insert, PostgreSQL will reject the insert or update and throw an error.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ALTER TABLE registrations\nADD FOREIGN KEY (talk_id)\nREFERENCES talks (id);\n")])])]),a("p",[t._v("or include the following line in the "),a("code",[t._v("CREATE TABLE")]),t._v(" statement ,")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("FOREIGN KEY (talk_id) REFERENCES talks (id)\n")])])]),a("h4",{attrs:{id:"cascading-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cascading-changes"}},[t._v("#")]),t._v(" Cascading Changes")]),t._v(" "),a("p",[t._v("By default, a foreign key constraint will prevent an engineer from deleting or updating a row of a parent table that is referenced by some child table. This behavior is sometimes explicitly specified in a "),a("code",[t._v("CREATE TABLE")]),t._v(" statement using "),a("code",[t._v("REFERENCES talks (id) ON DELETE RESTRICT")]),t._v(" or "),a("code",[t._v("REFERENCES talks (id) ON UPDATE RESTRICT")]),t._v(".")]),t._v(" "),a("p",[t._v("another strategy you may consider is adding a "),a("code",[t._v("CASCADE")]),t._v(" clause. Rather than preventing changes, "),a("code",[t._v("CASCADE")]),t._v(" clauses ("),a("code",[t._v("ON UPDATE CASCADE")]),t._v(", "),a("code",[t._v("ON DELETE CASCADE")]),t._v(") "),a("strong",[t._v("cause the updates or deletes to automatically be applied to any child tables")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" registrations\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("talk_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" talks "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"constraints-review"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constraints-review"}},[t._v("#")]),t._v(" Constraints Review")]),t._v(" "),a("p",[a("em",[t._v("Constraints")]),t._v(" are rules a DB engineer defines as part of the data model to gain more control over what values are allowed in specific columns and tables.")]),t._v(" "),a("p",[t._v("Constraints:")]),t._v(" "),a("ul",[a("li",[t._v("Reject rows containing values that shouldn’t be inserted into a database table, which can help with preserving data integrity and quality.")]),t._v(" "),a("li",[t._v("Raise an error when they’re violated, which can also help with debugging applications that write to the database.")])]),t._v(" "),a("p",[t._v("types of constraints:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Data types — Are your first line of defense, these rules aren’t constraints but can help reject incorrect data from your database.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("NOT NULL")]),t._v(" constraints — Reject incoming rows from your table when critical information is missing from a row.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("CHECK")]),t._v(" constraints — Give you more control over what rules you’d like to apply to your tables. These constraints will allow you to reject a row if it fails the criteria you’ve defined.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("UNIQUE")]),t._v(" constraints — Help with defining unique values in a table, they also create an index which can improve query and join performance.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("PRIMARY KEY")]),t._v(" constraints — A column or combination of columns that uniquely identify a row and are both "),a("code",[t._v("NOT NULL")]),t._v(" and "),a("code",[t._v("UNIQUE")]),t._v(". "),a("code",[t._v("PRIMARY KEY")]),t._v("s are unique to a table, and will often be used in joins between tables.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("FOREIGN KEY")]),t._v(" constraints — Allow you to maintain "),a("em",[t._v("referential integrity")]),t._v(" between two tables by validating the entry in one also appears in the other. Referential integrity depends on "),a("code",[t._v("FOREIGN KEY")]),t._v(" constraints.")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://www.postgresql.org/docs/10/ddl-constraints.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("PostgreSQL Constraints Docs"),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://discuss.codecademy.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Codecademy Forums"),a("OutboundLink")],1)])])]),t._v(" "),a("h1",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);e.default=n.exports}}]);