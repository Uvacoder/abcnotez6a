(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{459:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sql-aggregate-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-aggregate-functions"}},[t._v("#")]),t._v(" SQL Aggregate Functions")]),t._v(" "),a("p",[t._v("SQL is excellent at aggregating data the way you might in a "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Pivot_table",target:"_blank",rel:"noopener noreferrer"}},[t._v("pivot table"),a("OutboundLink")],1),t._v(" in Excel.")]),t._v(" "),a("p",[t._v("The functions themselves are the same ones you will find in Excel or any other analytics program")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-count",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("COUNT")]),a("OutboundLink")],1),t._v(" counts how many rows are in a particular column.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-sum",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("SUM")]),a("OutboundLink")],1),t._v(" adds together all the values in a particular column.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-min-max",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("MIN")]),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-min-max",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("MAX")]),a("OutboundLink")],1),t._v(" return the lowest and highest values in a particular column, respectively.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-avg",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("AVG")]),a("OutboundLink")],1),t._v(" calculates the average of a group of selected values.")])]),t._v(" "),a("p",[t._v("arithmetic operators only perform operations across rows. Aggregate functions are used to perform operations across entire columns (which could include millions of rows of data or more).")]),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("COUNT()")]),t._v(": count the number of rows")]),t._v(" "),a("li",[a("code",[t._v("SUM()")]),t._v(": the sum of the values in a column")]),t._v(" "),a("li",[a("code",[t._v("MAX()")]),t._v("/"),a("code",[t._v("MIN()")]),t._v(": the largest/smallest value")]),t._v(" "),a("li",[a("code",[t._v("AVG()")]),t._v(": the average of the values in a column")]),t._v(" "),a("li",[a("code",[t._v("ROUND()")]),t._v(": round the values in the column")])]),t._v(" "),a("p",[a("em",[t._v("Aggregate functions")]),t._v(" combine multiple rows together to form a single value of more meaningful information.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("GROUP BY")]),t._v(" is a clause used with aggregate functions to combine data from one or more columns.")]),t._v(" "),a("li",[a("code",[t._v("HAVING")]),t._v(" limit the results of a query based on an aggregate property.")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"counting-all-rows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#counting-all-rows"}},[t._v("#")]),t._v(" Counting all rows")]),t._v(" "),a("p",[a("code",[t._v("COUNT()")]),t._v(" is a function that takes the name of a column as an argument and counts the number of non-empty values in that column.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" table_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\n")])])]),a("p",[a("code",[t._v("COUNT")]),t._v(" is a "),a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-aggregate-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL aggregate function"),a("OutboundLink")],1),t._v(" for counting the number of rows in a particular column.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n")])])]),a("blockquote",[a("p",[a("em",[t._v("Note: Typing")]),t._v(" "),a("code",[t._v("COUNT(1)")]),t._v(" "),a("em",[t._v("has the same effect as")]),t._v(" "),a("code",[t._v("COUNT(*)")]),a("em",[t._v(". Which one you use is a matter of personal preference.")])])]),t._v(" "),a("p",[t._v("The following code will provide a count of all of rows in which the "),a("code",[t._v("high")]),t._v(" column "),a("strong",[t._v("is not null")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n")])])]),a("p",[t._v("We recommend naming your columns so that they make a little more sense to anyone else who views your work.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" count_of_date\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n")])])]),a("p",[t._v("For spaces, you will need to use double quotes.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Count Of Date"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n")])])]),a("blockquote",[a("p",[a("em",[t._v("Note: This is really the only place in which you'll ever want to use double quotes in SQL. Single quotes for everything else.")])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql-sum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-sum"}},[t._v("#")]),t._v(" SQL SUM")]),t._v(" "),a("p",[a("code",[t._v("SUM()")]),t._v(" is a function that takes the name of a column as an argument and returns the sum of all the values in that column.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("downloads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("SUM")]),t._v(" is a "),a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-aggregate-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL aggregate function"),a("OutboundLink")],1),t._v(". that totals the values in a given column. Unlike "),a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-count",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("COUNT")]),a("OutboundLink")],1),t._v(", you can only use "),a("code",[t._v("SUM")]),t._v(" on columns containing numerical values.")]),t._v(" "),a("blockquote",[a("p",[t._v("remember: "),a("strong",[t._v("aggregators only aggregate vertically")]),t._v(". If you want to perform a calculation across rows, you would do this with "),a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-operators#arithmetic-in-sql",target:"_blank",rel:"noopener noreferrer"}},[t._v("simple arithmetic"),a("OutboundLink")],1),t._v(".")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("SUM")]),t._v(" treats nulls as 0")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql-min-and-max"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-min-and-max"}},[t._v("#")]),t._v(" SQL MIN and MAX")]),t._v(" "),a("p",[t._v("MAX() and MIN() functions return the highest and lowest values in a column, respectively")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("downloads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("MAX()")]),t._v(" takes the name of a column as an argument and returns the largest value in that column.")]),t._v(" "),a("ul",[a("li",[t._v("can be used on non-numerical columns.")]),t._v(" "),a("li",[t._v("Depending on the column type, "),a("code",[t._v("MIN")]),t._v(' will return the lowest number, earliest date, or non-numerical value as close alphabetically to "A" as possible. '),a("code",[t._v("MAX")]),t._v(" does the opposite")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("volume"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" min_volume"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("volume"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" max_volume\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n")])])]),a("p",[t._v("also:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("close")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n  tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql-avg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-avg"}},[t._v("#")]),t._v(" SQL AVG")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("AVG")]),t._v(" is a "),a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-aggregate-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL aggregate function"),a("OutboundLink")],1),t._v(" that calculates the average of a selected group of value")]),t._v(" "),a("p",[t._v("useful, but has some limitations:")]),t._v(" "),a("ul",[a("li",[t._v("can only be used on numerical columns")]),t._v(" "),a("li",[t._v("ignores nulls completely")])]),t._v(" "),a("blockquote",[a("p",[t._v("There are some cases in which you'll want to treat null values as 0. For these cases, you'll want to write a statement that changes the nulls to 0")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"round"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#round"}},[t._v("#")]),t._v(" Round")]),t._v(" "),a("p",[a("code",[t._v("ROUND()")]),t._v(" function takes two arguments inside the parenthesis:")]),t._v(" "),a("ol",[a("li",[t._v("a column name")]),t._v(" "),a("li",[t._v("an integer")])]),t._v(" "),a("p",[t._v("rounds the values in the column to the number of decimal places specified by the integer.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql-group-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-group-by"}},[t._v("#")]),t._v(" SQL GROUP BY")]),t._v(" "),a("p",[t._v("to calculate an aggregate for data with certain characteristics.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" movies\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("the same as")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" movies\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1999")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" movies\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" movies\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("GROUP BY")]),t._v(" is a clause in SQL that is used with aggregate functions. It is used in collaboration with the "),a("code",[t._v("SELECT")]),t._v(" statement to arrange identical data into "),a("em",[t._v("groups")]),t._v(".")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("GROUP BY")]),t._v(" statement comes after any "),a("code",[t._v("WHERE")]),t._v(" statements, but before "),a("code",[t._v("ORDER BY")]),t._v(" or "),a("code",[t._v("LIMIT")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" category"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("downloads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" category"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-aggregate-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("SQL aggregate function"),a("OutboundLink")],1),t._v(" like "),a("code",[t._v("COUNT")]),t._v(", "),a("code",[t._v("AVG")]),t._v(", and "),a("code",[t._v("SUM")]),t._v("  aggregate across the entire table.")]),t._v(" "),a("p",[t._v("if you want to aggregate only part of a table:")]),t._v(" "),a("p",[a("code",[t._v("GROUP BY")]),t._v(" allows you to separate data into groups, which can be aggregated independently of one another")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" count\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v("\n")])])]),a("p",[t._v("You can group by multiple columns, but you have to separate column names with commas—just as with "),a("a",{attrs:{href:"https://mode.com/sql-tutorial/sql-order-by",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("ORDER BY")]),a("OutboundLink")],1),t._v("):")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" count\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),t._v("\t\n")])])]),a("h3",{attrs:{id:"group-by-column-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group-by-column-numbers"}},[t._v("#")]),t._v(" GROUP BY column numbers")]),t._v(" "),a("h4",{attrs:{id:"column-reference-s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#column-reference-s"}},[t._v("#")]),t._v(" column reference(s)")]),t._v(" "),a("p",[t._v("SQL lets us use column reference(s) in our "),a("code",[t._v("GROUP BY")]),t._v(" that will make our lives easier.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("1")]),t._v(" is the first column selected")]),t._v(" "),a("li",[a("code",[t._v("2")]),t._v(" is the second column selected")]),t._v(" "),a("li",[a("code",[t._v("3")]),t._v(" is the third column selected")])]),t._v(" "),a("p",[t._v("and so on.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" movies\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("this is the same:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("imdb_rating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" movies\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("--")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT category, \n   price,\n   AVG(downloads)\nFROM fake_apps\nGROUP BY category, price;\n")])])]),a("p",[t._v("or:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT category, \n   price,\n   AVG(downloads)\nFROM fake_apps\nGROUP BY 1, 2;\n")])])]),a("p",[t._v("As with "),a("code",[t._v("ORDER BY")]),t._v(", you can substitute numbers for column names in the "),a("code",[t._v("GROUP BY")]),t._v(" clause.")]),t._v(" "),a("blockquote",[a("p",[t._v("(generally recommended to do this only when you're grouping many columns, or if something else is causing the text in the "),a("code",[t._v("GROUP BY")]),t._v(" clause to be excessively long:)")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" count\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("p",[t._v("order of column names in your "),a("code",[t._v("GROUP BY")]),t._v(" clause doesn't matter")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("OPEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" price_change\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("\n  tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),t._v("\n")])])]),a("h3",{attrs:{id:"group-by-with-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group-by-with-limit"}},[t._v("#")]),t._v(" GROUP BY with LIMIT")]),t._v(" "),a("p",[t._v("SQL evaluates the aggregations before the "),a("code",[t._v("LIMIT")]),t._v(" clause.")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"sql-having"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-having"}},[t._v("#")]),t._v(" SQL HAVING")]),t._v(" "),a("p",[a("code",[t._v("HAVING")]),t._v(" is very similar to "),a("code",[t._v("WHERE")]),t._v(". But  to "),a("em",[t._v("filter groups")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   genre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" movies\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("HAVING")]),t._v(" statement always comes after "),a("code",[t._v("GROUP BY")]),t._v(", but before "),a("code",[t._v("ORDER BY")]),t._v(" and "),a("code",[t._v("LIMIT")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ROUND")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("downloads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" fake_apps\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" price\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("The "),a("code",[t._v("WHERE")]),t._v(" clause won't work for this because it doesn't allow you to filter on aggregate columns—that's where the "),a("code",[t._v("HAVING")]),t._v(" clause comes in:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" month_high\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" tutorial"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("aapl_historical_stock_price\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("month")]),t._v("\n")])])]),a("blockquote",[a("p",[a("em",[t._v("Note:")]),t._v(" "),a("code",[t._v("HAVING")]),t._v(" "),a("em",[t._v('is the "clean" way to filter a query that has been aggregated, but this is also commonly done using a subquery')])])]),t._v(" "),a("hr")])}),[],!1,null,null,null);s.default=n.exports}}]);